package ${basePackageName}.security;

import java.lang.reflect.Field;

import javax.annotation.PostConstruct;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.owasp.esapi.ESAPI;
import org.springframework.stereotype.Component;

import ${basePackageName}.security.annotation.SecuredField;

@Aspect
@Component
public class SecurityAspect {

	@PostConstruct
	public void init(){
		System.out.println("Initializing Security Aspect.");
	}
	
	@Around("execution(* ${basePackageName}.controller.*.*(..))")
    public Object decorateForSecurity(ProceedingJoinPoint joinPoint) throws Throwable {
		Object[] arguments = joinPoint.getArgs();
		for(Object argument : arguments){
			if(argument != null){
				System.out.println("Param " + argument.getClass().getName() + " ===> " + argument.getClass().getSimpleName());
				Field[] fields = argument.getClass().getDeclaredFields();
				for(Field field : fields){
					if(field.getAnnotation(SecuredField.class) != null){
						String encodeType = field.getAnnotation(SecuredField.class).encodeFor().toString();
						System.out.println(field.getName() + " will be encoded for " + encodeType );						
					}
				}
			}
		}		

		
		Object objectToReturn = joinPoint.proceed(arguments);
		return objectToReturn;
	}
	
}