package $daoPackageName;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.LinkedHashMap;

import javax.annotation.PostConstruct;
import org.springframework.stereotype.Repository;

//import the domain
import ${basePackageName}.web.domain.$domainClassName;
import ${basePackageName}.common.ListWrapper;
import ${basePackageName}.dao.${domainClassName}DAO;

@Repository
public class ${domainClassName}DAO {

	//private List<${domainClassName}> all${domainClassName} = new ArrayList<${domainClassName}>();
	private Map<String, ${domainClassName}> allData = new LinkedHashMap<String, ${domainClassName}>();
	
	#set($idGetter = "get${domainClassIdAttributeName.substring(0,1).toUpperCase()}${domainClassIdAttributeName.substring(1)}()")

	@PostConstruct
	public void init(){
		#set($start = 0)
		#set($end = 13)
		#set($range = [$start..$end])
		#foreach($i in $range)
		   	${domainClassName} ${domainClassName.toLowerCase()}${i} = new ${domainClassName}();		
			${domainClassName.toLowerCase()}${i}.populateWithSample();			
			allData.put(${domainClassName.toLowerCase()}${i}.$idGetter, ${domainClassName.toLowerCase()}${i});
			
		#end
	}
	

	public $domainClassName get$domainClassName(String id){
		 System.out.println("Retrieving ${domainClassName} object with id: " + id);
		 //$domainClassName  $domainClassName.toLowerCase() = new  $domainClassName();
		 // ${domainClassName.toLowerCase()}.populateWithSample();
		 //return $domainClassName.toLowerCase();
		 return allData.get(id);
	}
	
	public ListWrapper<${domainClassName}> get${domainClassName}s(int page, 
			int pageSize, String sortByAttributeName, String sortDirection){
			
		List<${domainClassName}> allDataList = new ArrayList<${domainClassName}>(allData.values());
		List<${domainClassName}> partialPage = new ArrayList<${domainClassName}>();
		int end = (page * pageSize);
		int start = (end) - pageSize;
		int totalPages = roundUp(allDataList.size(),  pageSize);
		
		if(end > allDataList.size())
			end = allDataList.size();
		if(start < allDataList.size())
			partialPage = allDataList.subList(start, end);
				
		ListWrapper<${domainClassName}> listWrapper = new ListWrapper<${domainClassName}>();
		listWrapper.setRows(partialPage);
		listWrapper.setTotalRecords(allDataList.size());
		listWrapper.setLastPage(totalPages);
		return listWrapper;
	}
	
	private int roundUp(int num, int divisor) {
		return (num + divisor - 1) / divisor;
	}
}
