package $controllerPackageName;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

//import the domain
import ${basePackageName}.web.domain.$domainClassName;


@Controller
public class ${domainClassName}Controller {

	private List<${domainClassName}> all${domainClassName} = new ArrayList<${domainClassName}>();

	@PostConstruct
	public void init(){
		#set($start = 0)
		#set($end = 13)
		#set($range = [$start..$end])
		#foreach($i in $range)
		   	${domainClassName} ${domainClassName.toLowerCase()}${i} = new ${domainClassName}();		
			${domainClassName.toLowerCase()}${i}.populateWithSample();
			all${domainClassName}.add(${domainClassName.toLowerCase()}${i});
		#end
	}

	@RequestMapping("/controller/home")
	public String showHomePage(){
		return "/WEB-INF/index.jsp";
	}
	
	@RequestMapping(value = "/controller/$domainClassName.toLowerCase()/{id}", method = RequestMethod.GET)
	public @ResponseBody $domainClassName get$domainClassName(@PathVariable("id") String id){
		 $domainClassName  $domainClassName.toLowerCase() = new  $domainClassName();
		  ${domainClassName.toLowerCase()}.populateWithSample();
		 return $domainClassName.toLowerCase();
	}
	
	
	@RequestMapping(value = "/controller/${domainClassName.toLowerCase()}", headers = {"accept=application/json"}, method = RequestMethod.POST)
	public @ResponseBody String saveNew${domainClassName}(@RequestBody ${domainClassName} ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}){
		System.out.println(${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}.toString());
		return "";
	}
	
	@RequestMapping(value = "/controller/${domainClassName.toLowerCase()}/{id}", headers = {"accept=application/json"}, method = RequestMethod.PUT)
	public  @ResponseBody String  update${domainClassName}(@RequestBody ${domainClassName} ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}){
		System.out.println(${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}.toString());
		return "";
	}
	
	@RequestMapping("/controller/${domainClassName.toLowerCase()}s")
	public @ResponseBody ListWrapper getAll${domainClassName}s(@RequestParam("page") int page, @RequestParam("per_page") int pageSize){
		
		List<${domainClassName}> partialPage = new ArrayList<${domainClassName}>();
		int end = (page * pageSize);
		int start = (end) - pageSize;
		int totalPages = roundUp(all${domainClassName}.size(),  pageSize);
		
		if(end > all${domainClassName}.size())
			end = all${domainClassName}.size();
		if(start < all${domainClassName}.size())
			partialPage = all${domainClassName}.subList(start, end);
		
		
		ListWrapper listWrapper = new ListWrapper();
		listWrapper.set${domainClassName}s(partialPage);
		listWrapper.setTotalRecords(all${domainClassName}.size());
		listWrapper.setLastPage(totalPages);
		return listWrapper;
	}
	
	private  int roundUp(int num, int divisor) {
	    return (num + divisor - 1) / divisor;
	}
	
	public class ListWrapper{
		private List<${domainClassName}> ${domainClassName.toLowerCase()}s;
		private int totalRecords;
		private int lastPage;
		
		public List<${domainClassName}> get${domainClassName}s() {
			return ${domainClassName.toLowerCase()}s;
		}

		public void set${domainClassName}s(List<${domainClassName}> ${domainClassName.toLowerCase()}s) {
			this.${domainClassName.toLowerCase()}s = ${domainClassName.toLowerCase()}s;
		}

		public int getTotalRecords() {
			return totalRecords;
		}

		public void setTotalRecords(int totalRecords) {
			this.totalRecords = totalRecords;
		}

		public int getLastPage() {
			return lastPage;
		}

		public void setLastPage(int lastPage) {
			this.lastPage = lastPage;
		}
	}
	
	
}
