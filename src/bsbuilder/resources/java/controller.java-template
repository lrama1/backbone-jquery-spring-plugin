package  ${basePackageName}.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.apache.log4j.Logger;
import java.security.Principal;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

//import the domain
import ${basePackageName}.web.domain.$domainClassName;
import ${basePackageName}.service.${domainClassName}Service;
import ${basePackageName}.security.SampleUserDetails;
import ${basePackageName}.common.ListWrapper;
import org.springframework.security.core.Authentication;

@Controller
public class ${domainClassName}Controller {	

	Logger logger = Logger.getLogger(this.getClass());

	@Autowired
	${domainClassName}Service ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}Service;
	
		
	@RequestMapping(value = "/$domainClassName.toLowerCase()/{id}", method = RequestMethod.GET)
	public @ResponseBody $domainClassName get$domainClassName(@PathVariable("id") String id, Principal principal){
		Authentication authenticationToken = (Authentication)principal;
		SampleUserDetails user = (SampleUserDetails)authenticationToken.getPrincipal();
		return ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}Service.get${domainClassName}(id);
	}
	
	
	@RequestMapping(value = "/${domainClassName.toLowerCase()}", headers = {"accept=application/json"}, method = RequestMethod.POST)
	public @ResponseBody ${domainClassName} saveNew${domainClassName}(@RequestBody ${domainClassName} ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}){
		logger.info(${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}.toString());
		return ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)};
	}
	
	@RequestMapping(value = "/${domainClassName.toLowerCase()}/{id}", headers = {"accept=application/json"}, method = RequestMethod.PUT)
	public  @ResponseBody ${domainClassName}  update${domainClassName}(@RequestBody ${domainClassName} ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}){
		logger.info(${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}.toString());
		return ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)};
	}
	
	@RequestMapping("/${domainClassName.toLowerCase()}s")
	public @ResponseBody
	ListWrapper<${domainClassName}> getAll${domainClassName}s(
			@RequestParam("page") int pageNumber,
			@RequestParam("per_page") int pageSize,
			@RequestParam(value = "sort_by", required = false) String sortByAttributeName,
			@RequestParam(value = "order", required = false) String sortDirection) {
		return ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}Service.get${domainClassName}s(pageNumber, pageSize, sortByAttributeName, sortDirection);
		
	}	
}
