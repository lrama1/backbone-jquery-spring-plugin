package $controllerPackageName;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

//import the domain
import ${basePackageName}.web.domain.$domainClassName;
import ${basePackageName}.service.${domainClassName}Service;
import ${basePackageName}.common.ListWrapper;


@Controller
public class ${domainClassName}Controller {	

	@Autowired
	${domainClassName}Service ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}Service;
	
	/*private List<${domainClassName}> all${domainClassName} = new ArrayList<${domainClassName}>();

	@PostConstruct
	public void init(){
		#set($start = 0)
		#set($end = 13)
		#set($range = [$start..$end])
		#foreach($i in $range)
		   	${domainClassName} ${domainClassName.toLowerCase()}${i} = new ${domainClassName}();		
			${domainClassName.toLowerCase()}${i}.populateWithSample();
			all${domainClassName}.add(${domainClassName.toLowerCase()}${i});
		#end
	}*/

	
	@RequestMapping(value = "/$domainClassName.toLowerCase()/{id}", method = RequestMethod.GET)
	public @ResponseBody $domainClassName get$domainClassName(@PathVariable("id") String id){
		//System.out.println("Retrieving ${domainClassName} object with id: " + id);
		// $domainClassName  $domainClassName.toLowerCase() = new  $domainClassName();
		// ${domainClassName.toLowerCase()}.populateWithSample();
		// return $domainClassName.toLowerCase();
		return ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}Service.get${domainClassName}(id);
	}
	
	
	@RequestMapping(value = "/${domainClassName.toLowerCase()}", headers = {"accept=application/json"}, method = RequestMethod.POST)
	public @ResponseBody String saveNew${domainClassName}(@RequestBody ${domainClassName} ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}){
		System.out.println(${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}.toString());
		return "";
	}
	
	@RequestMapping(value = "/${domainClassName.toLowerCase()}/{id}", headers = {"accept=application/json"}, method = RequestMethod.PUT)
	public  @ResponseBody String  update${domainClassName}(@RequestBody ${domainClassName} ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}){
		System.out.println(${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}.toString());
		return "";
	}
	
	@RequestMapping("/${domainClassName.toLowerCase()}s")
	public @ResponseBody
	ListWrapper<${domainClassName}> getAll${domainClassName}s(
			@RequestParam("page") int pageNumber,
			@RequestParam("per_page") int pageSize,
			@RequestParam(value = "sort_by", required = false) String sortByAttributeName,
			@RequestParam(value = "order", required = false) String sortDirection) {
		return ${domainClassName.substring(0,1).toLowerCase()}${domainClassName.substring(1)}Service.get${domainClassName}s(pageNumber, pageSize, sortByAttributeName, sortDirection);
		
	}
	
	/*
	@RequestMapping("/${domainClassName.toLowerCase()}s")
	public @ResponseBody ListWrapper getAll${domainClassName}s(@RequestParam("page") int page, 
			@RequestParam("per_page") int pageSize,
			@RequestParam(value = "sort_by", required = false) String sortByAttributeName,
			@RequestParam(value = "order", required = false) String sortDirection){
		
		List<${domainClassName}> partialPage = new ArrayList<${domainClassName}>();
		int end = (page * pageSize);
		int start = (end) - pageSize;
		int totalPages = roundUp(all${domainClassName}.size(),  pageSize);
		
		if(end > all${domainClassName}.size())
			end = all${domainClassName}.size();
		if(start < all${domainClassName}.size())
			partialPage = all${domainClassName}.subList(start, end);
		
		
		ListWrapper listWrapper = new ListWrapper();
		listWrapper.set${domainClassName}s(partialPage);
		listWrapper.setTotalRecords(all${domainClassName}.size());
		listWrapper.setLastPage(totalPages);
		return listWrapper;
	}*/
	
}
