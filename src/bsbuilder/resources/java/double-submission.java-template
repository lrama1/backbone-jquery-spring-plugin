package  ${basePackageName}.web.utils;

import static org.reflections.ReflectionUtils.getFields;
import static org.reflections.ReflectionUtils.getMethods;
import static org.reflections.ReflectionUtils.withModifier;
import static org.reflections.ReflectionUtils.withName;

import java.io.StringWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.Logger;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;


@Aspect
@Component
public class DoubleSubmissionAspect {
	
	Map<Integer, Date> mapOfSubmittedData = new HashMap<Integer, Date>();
	
	Logger logger = Logger.getLogger(this.getClass());
	
	//60000 is 1 minute
		private final long MAX_AGE = 60000;
		private final long MAX_HASH_LIST_SIZE = 15;
	
	@Pointcut("within(@org.springframework.stereotype.Controller *)")
    public void controllerBean() {}
	
	@Before("execution(public * *(..)) && controllerBean()")
    public void decorateForSecurity(JoinPoint joinPoint) throws Throwable {
		Object[] arguments = joinPoint.getArgs();
		StringWriter writer = new StringWriter();
		for(Object argument : arguments){
			//System.out.println(concatFields(writer, argument));
			concatFields(writer, argument);
		}
		String concatenatedString = writer.toString();
		Integer hashCode = concatenatedString.hashCode();
		if(mapOfSubmittedData.size() > MAX_HASH_LIST_SIZE){
			discardOldHashes();
		}
		Date existingHashAdded = mapOfSubmittedData.get(hashCode); 
		if( existingHashAdded != null){
			Long age = System.currentTimeMillis() - existingHashAdded.getTime();
			if(age < MAX_AGE){
				throw new RuntimeException("Double submission prevented. A similar submission was received before the threshold expired.");
			}else{
				mapOfSubmittedData.put(hashCode, new Date());
			}
		}else{
			mapOfSubmittedData.put(hashCode, new Date());
		}
		System.out.println("Final String: " + writer.toString());
	}
	
	public String concatFields(StringWriter writer, Object objectToEncode) throws Exception{
		//logger.info("Atttempting to process " + objectToEncode.getClass().getSimpleName());
		if(objectToEncode != null && (isOfTypeWeCareAbout(objectToEncode))){
			writer.append(objectToEncode.toString());
		}else if(objectToEncode != null && objectToEncode instanceof List){
			//logger.info("Encountered a list/collection........................");			
			List<Object> listToProcess = (List<Object>)objectToEncode;
			for(Object object : listToProcess){
					concatFields(writer, object);				
			}
		}else if(objectToEncode != null && objectToEncode.getClass().isArray()){
			//logger.info("Encountered a list/collection........................");			
			Object[] listToProcess = (Object[])objectToEncode;
			for(Object object : listToProcess){
					concatFields(writer, object);				
			}
		}
		else if(objectToEncode != null && !(objectToEncode.getClass() == String.class)){			
			Set<Field> fields = getFields(objectToEncode.getClass());
			for(Field field : fields){	
				Set<Method> getterMethods =  getMethods(objectToEncode.getClass(), withName(getGetterMethodName(field)), withModifier(Modifier.PUBLIC));
				if(getterMethods.size() > 0){
					//logger.info("Processing complex object: " + field.getName());
					Method method = getterMethods.iterator().next();
					concatFields(writer, method.invoke(objectToEncode));	
				}
			}
		}
		return writer.toString();
	}
	
	private boolean isOfTypeWeCareAbout(Object object){
		return object.getClass() == String.class || object.getClass() == Integer.class ||
				object.getClass() == Long.class || object.getClass() == BigDecimal.class || 
				object.getClass() == Float.class ||
				object.getClass() == Double.class ||
				object.getClass() == Short.class ||
				object.getClass() == Byte.class ||
				object.getClass() == Date.class;
	}
	
	private String getGetterMethodName(Field field){
		return "get" + field.getName().substring(0, 1).toUpperCase() + field.getName().substring(1);
	}
	
	private String getSetterMethodName(Field field){
		return "set" + field.getName().substring(0, 1).toUpperCase() + field.getName().substring(1);
	}
	
	private synchronized void discardOldHashes(){
		long currentTime = System.currentTimeMillis();
		logger.info("Cleaning up hashes: " + mapOfSubmittedData.size());
		List<Integer> keysOfHashesToEvict = new ArrayList<Integer>();
		for(Integer key : mapOfSubmittedData.keySet()){
			long age = currentTime - mapOfSubmittedData.get(key).getTime();
			if(age >= MAX_AGE){
				logger.info("evicting " + age);								
				keysOfHashesToEvict.add(key);
			}
		}
		
		for(Integer key : keysOfHashesToEvict){
			mapOfSubmittedData.remove(key);
		}		
		logger.info("After cleaning up tokens: " + mapOfSubmittedData.size());
	}
	
	public static void main(String[] args){
		SecurityAspect aspect = new SecurityAspect();
		class Owner{
			private String name;
			private String title;
			
			
			public Owner(String name, String title) {
				super();
				this.name = name;
				this.title = title;
			}
			public String getName() {
				return name;
			}
			public void setName(String name) {
				this.name = name;
			}
			public String getTitle() {
				return title;
			}
			public void setTitle(String title) {
				this.title = title;
			}
			
			
		}
		
		class Account{
			private Integer accountId;
			private String accountName;
			private String address;
			private List<String> locations = new ArrayList<String>();
			private List<Owner> owners = new ArrayList<Owner>();
			private String[] metas = {"bb", "xx"};
			private Date dateStarted;
			
			public Integer getAccountId() {
				return accountId;
			}
			public void setAccountId(Integer accountId) {
				this.accountId = accountId;
			}
			public String getAccountName() {
				return accountName;
			}
			public void setAccountName(String accountName) {
				this.accountName = accountName;
			}
			public String getAddress() {
				return address;
			}
			public void setAddress(String address) {
				this.address = address;
			}
			public List<String> getLocations() {
				return locations;
			}
			public void setLocations(List<String> locations) {
				this.locations = locations;
			}
			public List<Owner> getOwners() {
				return owners;
			}
			public void setOwners(List<Owner> owners) {
				this.owners = owners;
			}
			public String[] getMetas() {
				return metas;
			}
			public void setMetas(String[] metas) {
				this.metas = metas;
			}
			public Date getDateStarted() {
				return dateStarted;
			}
			public void setDateStarted(Date dateStarted) {
				this.dateStarted = dateStarted;
			}				
			
		}
		
		Account account = new Account();
		account.setAccountId(9900);
		account.setAccountName("Axl Rama");
		account.setAddress("test");
		account.getLocations().add("hey you");
		account.getLocations().add("yea you");
		account.setDateStarted(new Date());
		
		Owner owner = new Owner("ols", "mr");
		account.getOwners().add(owner);
		
		try {
			String concatVals = aspect.concatFields(new StringWriter(), account);
			System.out.println(concatVals);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
